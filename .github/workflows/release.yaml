name: build

on:
  push:
    branches:
      - "master"
    tags:
      - "**"

jobs:
  build:
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          
      - run: git fetch --prune --unshallow --tags

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.8.0
        with:
          dotnet-version: 6.0.x

      - name: Setup msvc
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build
        run: pwsh dist.ps1

      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
  
  release:
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags

      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Set Version
        id: version
        uses: gittools/actions/gitversion/execute@v0.9.7

      - name: Display Version outputs
        run: |
          echo "Major: ${{ steps.version.outputs.major }}"
          echo "Minor: ${{ steps.version.outputs.minor }}"
          echo "Patch: ${{ steps.version.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.version.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.version.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.version.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.version.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.version.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.version.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.version.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.version.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.version.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.version.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.version.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.version.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.version.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.version.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.version.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.version.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.version.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.version.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.version.outputs.sha }}"
          echo "ShortSha: ${{ steps.version.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.version.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.version.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.version.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.version.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.version.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.version.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.version.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.version.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.version.outputs.commitDate }}"
      
      - name: Parse Changelog
        id: changelog
        uses: coditory/changelog-parser@v1

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: v${{ steps.version.outputs.informationalVersion }}
          body: ${{ steps.changelog.outputs.description }}
          artifacts: dist/MistforgeLauncher.exe,dist/MistforgeLauncher,dist/GiganticEmu.Agent.exe,dist/GiganticEmu.Agent,dist/ArcSDK.dll
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: ${{ github.sha }}
          tag: v${{ steps.version.outputs.informationalVersion }}
          prerelease: ${{ steps.version.outputs.preReleaseLabel  != '' }}

      - name: Create Discord release notification
        uses: tsickert/discord-webhook@v4.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          username: GiganticEmu Release Notifications
          avatar-url: https://cdn.jsdelivr.net/gh/BigBoot/GiganticEmu@master/GiganticEmu.Agent/icon.png
          embed-title: "Version v${{ steps.version.outputs.informationalVersion }}"
          embed-description: "**Changes:**\n${{ steps.changelog.outputs.description }}\n\n[Show more](https://github.com/BigBoot/GiganticEmu/releases/tag/v${{ steps.version.outputs.informationalVersion }})"
          embed-color: 1736083
          embed-thumbnail-url: https://cdn.jsdelivr.net/gh/BigBoot/GiganticEmu@master/GiganticEmu.Agent/icon.png

